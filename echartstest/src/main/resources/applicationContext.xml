<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.0.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd "
	default-lazy-init="true">

	<description>Spring公共配置 </description>


	<!--扫描读取注解 配置 （组件扫描） -->
	<context:component-scan base-package="org.zh,com.zh">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>

	<!-- 定义受环境影响易变的变量 -->
	<bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />
		<property name="ignoreResourceNotFound" value="true" />
		<property name="locations">
			<list>
				<!-- 标准配置 -->
				<value>classpath*:/application.properties</value>
			</list>
		</property>
	</bean>



	<!-- 数据源配置,使用应用内的DBCP数据库连接池 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<!-- Connection Info -->
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />

		<!-- Connection Pooling Info -->
		<property name="initialSize" value="${dbcp.initialSize}" />
		<property name="maxActive" value="${dbcp.maxActive}" />
		<property name="maxIdle" value="${dbcp.maxIdle}" />
		<property name="defaultAutoCommit" value="false" />
	</bean>


	<!-- Hibernate配置 -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 配置spring取实体类 -->
		<property name="packagesToScan">
			<list>
				<value>org.zh.bean</value>
				<value>com.zh.bean</value>
			</list>
		</property>

		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
				<!-- CreateTable建表必须设置此项hibernate.hbm2ddl.auto -->
				<!--问题：create每次插入，都会删除之前的表，新建再填数据 update 是没表建表，有表往下添加数据 -->
				<prop key="hibernate.hbm2ddl.auto">update</prop>
			</props>
		</property>


	</bean>


	<!-- 事务管理器配置,单数据源事务 -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<!-- 使用annotation定义事务 -->
	<tx:annotation-driven transaction-manager="transactionManager"
		proxy-target-class="true" />


	<!-- 拦截器方式配置事务 -->
	<!-- <tx:advice id="transactionAdvice" transaction-manager="transactionManager"> 
		<tx:attributes> 以如下关键字开头的方法使用事务 <tx:method name="add*" /> <tx:method name="save*" 
		/> <tx:method name="update*" /> <tx:method name="modify*" /> <tx:method name="edit*" 
		/> <tx:method name="delete*" /> <tx:method name="remove*" /> <tx:method name="repair" 
		/> <tx:method name="deleteAndRepair" /> 以如下关键字开头的方法不使用事务 <tx:method name="get*" 
		propagation="SUPPORTS" /> <tx:method name="find*" propagation="SUPPORTS" 
		/> <tx:method name="load*" propagation="SUPPORTS" /> <tx:method name="search*" 
		propagation="SUPPORTS" /> <tx:method name="datagrid*" propagation="SUPPORTS" 
		/> 其他方法不使用事务 <tx:method name="*" propagation="SUPPORTS" /> </tx:attributes> 
		</tx:advice> -->
	<!-- 切面，将事务用在哪些对象上 -->
	<!-- <aop:config> <aop:pointcut id="transactionPointcut" expression="execution(* 
		com..service..*.*(..))" /> <aop:advisor pointcut-ref="transactionPointcut" 
		advice-ref="transactionAdvice" /> </aop:config> -->

<!-- AOP注解配置  -->
<aop:aspectj-autoproxy />


</beans>